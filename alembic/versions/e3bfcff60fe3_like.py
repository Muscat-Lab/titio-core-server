"""like

Revision ID: e3bfcff60fe3
Revises: 078bf30c0831
Create Date: 2023-10-14 20:32:58.516430

"""
from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "e3bfcff60fe3"
down_revision: Union[str, None] = "078bf30c0831"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "genres",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(length=30), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("genres_pkey")),
    )
    op.create_index(op.f("genres_id_idx"), "genres", ["id"], unique=False)
    op.create_table(
        "user_genre_likes",
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("genre_id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["genre_id"], ["genres.id"], name=op.f("user_genre_likes_genre_id_fkey")
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("user_genre_likes_user_id_fkey")
        ),
        sa.PrimaryKeyConstraint(
            "user_id", "genre_id", name=op.f("user_genre_likes_pkey")
        ),
    )
    op.create_table(
        "user_performance_likes",
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("performance_id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["performance_id"],
            ["performances.id"],
            name=op.f("user_performance_likes_performance_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("user_performance_likes_user_id_fkey")
        ),
        sa.PrimaryKeyConstraint(
            "user_id", "performance_id", name=op.f("user_performance_likes_pkey")
        ),
    )
    op.create_table(
        "user_performer_likes",
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("performer_id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["performer_id"],
            ["performers.id"],
            name=op.f("user_performer_likes_performer_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("user_performer_likes_user_id_fkey")
        ),
        sa.PrimaryKeyConstraint(
            "user_id", "performer_id", name=op.f("user_performer_likes_pkey")
        ),
    )
    op.add_column("performers", sa.Column("profile_image_id", sa.Uuid(), nullable=True))
    op.create_foreign_key(
        op.f("performers_profile_image_id_fkey"),
        "performers",
        "images",
        ["profile_image_id"],
        ["id"],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        op.f("performers_profile_image_id_fkey"), "performers", type_="foreignkey"
    )
    op.drop_column("performers", "profile_image_id")
    op.drop_table("user_performer_likes")
    op.drop_table("user_performance_likes")
    op.drop_table("user_genre_likes")
    op.drop_index(op.f("genres_id_idx"), table_name="genres")
    op.drop_table("genres")
    # ### end Alembic commands ###
